import{_ as s,c as n,o as a,x as l}from"./chunks/framework.1KfrR5_P.js";const m=JSON.parse('{"title":"使用ast实现uniapp埋点","description":"","frontmatter":{"title":"使用ast实现uniapp埋点","tags":["uniapp","前端"],"cover":"/vitepress-theme-sakura/60651947_p0.jpg"},"headers":[],"relativePath":"posts/ast埋点.md","filePath":"posts/ast埋点.md"}'),p={name:"posts/ast埋点.md"},e=l(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>最近接到埋点需求，需要对Uni项目的App端和小程序进行埋点。经过研究社区提供的方案后，发现并没有一个完全符合公司业务需求的方案。因此，决定自己动手实现一个定制化的埋点方案。</p><h2 id="方案以及实现原理" tabindex="-1">方案以及实现原理 <a class="header-anchor" href="#方案以及实现原理" aria-label="Permalink to &quot;方案以及实现原理&quot;">​</a></h2><p>前提条件是使用Vite脚手架搭建的Uni项目。</p><p>解决方案是编写一个Vite插件，在构建过程中预先修改模板字符串。借助Vue自带的vue/compiler-sfc插件，我们可以将Vue代码解析为AST（抽象语法树），通过AST精确修改模板代码，无需使用复杂的正则表达式进行字符串匹配和修改。这种方案适用于大多数Vue项目。需要注意的是，由于这种操作会修改项目代码，建议在完成后编写测试进行验证，推荐使用Vitest进行测试。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">由于小程序端以及app端并没有window，所以需要使用混入的方式</span></span>
<span class="line"><span style="color:#24292E;">// utils.ts</span></span>
<span class="line"><span style="color:#24292E;">export const 你的埋点函数 = {</span></span>
<span class="line"><span style="color:#24292E;">  methods: {</span></span>
<span class="line"><span style="color:#24292E;">    sendMd: (code: string) =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    // ... 处理你的业务</span></span>
<span class="line"><span style="color:#24292E;">      uni.$emit(&quot;sendMd&quot;, code);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">APP.VUE</span></span>
<span class="line"><span style="color:#24292E;">export const createApp = () =&gt; {</span></span>
<span class="line"><span style="color:#24292E;">   // ***</span></span>
<span class="line"><span style="color:#24292E;">  app.mixin(&#39;你的埋点函数&#39;);</span></span>
<span class="line"><span style="color:#24292E;">  return { app, Pinia };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>pages.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">=test </span><span style="color:#6F42C1;">data-md</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;code1&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                // ....</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>inject-click-handler.ts vite插件</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { parse } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;vue/compiler-sfc&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Plugin } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &quot;vite&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Plugin</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;inject-click-handler&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">    transform</span><span style="color:#24292E;">(</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">vue</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(id)) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> parseCode</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> parse</span><span style="color:#24292E;">(code);</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parseCode) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parseCode.descriptor?.template?.content) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> dataMdRegex</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> /&lt;</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">&gt;]</span><span style="color:#D73A49;">*\\b</span><span style="color:#032F62;">data-md=&quot;(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">&quot;]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">)&quot;</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">&gt;]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 匹配data-md，这里需要根据业务进行调整。</span></span>
<span class="line"><span style="color:#6A737D;">        // 匹配当前文件是否有埋点标识，在继续往下遍历ast</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">content</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parseCode.descriptor.template;</span></span>
<span class="line"><span style="color:#6A737D;">        // 返回null的时候表示不修改任何代码</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">content.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(dataMdRegex)) {</span></span>
<span class="line"><span style="color:#D73A49;">          return</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 获取template模板</span></span>
<span class="line"><span style="color:#D73A49;">        let</span><span style="color:#24292E;"> $code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parseCode.descriptor.template.content;</span></span>
<span class="line"><span style="color:#6A737D;">        // 需要修改的节点数组</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> nodeArray</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#6A737D;">        // 递归ast节点</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#6F42C1;"> handleEachAst</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">node</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">          if</span><span style="color:#24292E;"> (node?.props.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">             // 查找我们在页面写的data-md</span></span>
<span class="line"><span style="color:#D73A49;">            const</span><span style="color:#005CC5;"> isMd</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> node?.props?.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              (</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">                item?.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;data-md&quot;</span><span style="color:#D73A49;"> ||</span></span>
<span class="line"><span style="color:#24292E;">                (item.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;bind&quot;</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> item?.arg?.content </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;data-md&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            );</span></span>
<span class="line"><span style="color:#6A737D;">            // 查找当前元素是否有点击函数并追加混入的埋点函数</span></span>
<span class="line"><span style="color:#D73A49;">            if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!!</span><span style="color:#24292E;">isMd) {</span></span>
<span class="line"><span style="color:#D73A49;">              const</span><span style="color:#005CC5;"> findVueClickEvent</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> node?.props?.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                (</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;on&quot;</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> item.type </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 7</span></span>
<span class="line"><span style="color:#24292E;">              );</span></span>
<span class="line"><span style="color:#D73A49;">              let</span><span style="color:#24292E;"> pushFn </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">              const</span><span style="color:#005CC5;"> mdContent</span><span style="color:#D73A49;"> =</span></span>
<span class="line"><span style="color:#24292E;">                isMd.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &quot;data-md&quot;</span><span style="color:#D73A49;"> ?</span><span style="color:#032F62;"> \`&#39;\${</span><span style="color:#24292E;">isMd</span><span style="color:#032F62;">.</span><span style="color:#24292E;">value</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}&#39;\`</span><span style="color:#D73A49;"> :</span><span style="color:#24292E;"> isMd.exp.content;</span></span>
<span class="line"><span style="color:#D73A49;">              if</span><span style="color:#24292E;"> (findVueClickEvent) {</span></span>
<span class="line"><span style="color:#6A737D;">                 // 检查是否一个函数   sendMd是混入的埋点函数</span></span>
<span class="line"><span style="color:#D73A49;">                const</span><span style="color:#005CC5;"> isFunctionCall</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> /</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">\\s</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">[a-zA-Z_$][0-9a-zA-Z_$]</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">\\s</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">)]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\\s</span><span style="color:#D73A49;">*$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">                if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isFunctionCall.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(findVueClickEvent.exp.content)) {</span></span>
<span class="line"><span style="color:#24292E;">                  findVueClickEvent.exp.content </span><span style="color:#D73A49;">+=</span><span style="color:#032F62;"> &quot;()&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                pushFn </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> \`@\${</span><span style="color:#24292E;">findVueClickEvent</span><span style="color:#032F62;">.</span><span style="color:#24292E;">arg</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}=&quot;sendMd(&#39;sendMd&#39;,\${</span><span style="color:#24292E;">mdContent</span><span style="color:#032F62;">});\${</span><span style="color:#24292E;">findVueClickEvent</span><span style="color:#032F62;">.</span><span style="color:#24292E;">exp</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}&quot;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">              } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                pushFn </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> \`@click=&quot;sendMd(&#39;sendMd&#39;,\${</span><span style="color:#24292E;">mdContent</span><span style="color:#032F62;">})&quot;\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#D73A49;">              const</span><span style="color:#005CC5;"> nodeStr</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> node.loc.source.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(findVueClickEvent.loc.source, pushFn);</span></span>
<span class="line"><span style="color:#24292E;">              nodeArray.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">                source: node.loc.source,</span></span>
<span class="line"><span style="color:#24292E;">                replaceSource: nodeStr</span></span>
<span class="line"><span style="color:#24292E;">              });</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#D73A49;">          if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(node?.children)) {</span></span>
<span class="line"><span style="color:#24292E;">            node.children.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              item.props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#6F42C1;"> handleEachAst</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">          if</span><span style="color:#24292E;"> (nodeArray.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            nodeArray.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              $code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $code.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(item.source, item.replaceSource);</span></span>
<span class="line"><span style="color:#24292E;">            });</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">        handleEachAst</span><span style="color:#24292E;">(ast);</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          code: code.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(parseCode.descriptor.template.content, $code)</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#005CC5;"> null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><p>vite.config.js</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#6F42C1;">  InjectClickHandler</span><span style="color:#24292E;">(), </span><span style="color:#6A737D;">// 必须写在uniPlugin前面</span></span>
<span class="line"><span style="color:#24292E;">  uniPlugin,</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,13),o=[e];function c(r,t,i,y,b,u){return a(),n("div",null,o)}const d=s(p,[["render",c]]);export{m as __pageData,d as default};
