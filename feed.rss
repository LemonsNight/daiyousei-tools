<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>S u z u k a</title>
        <link>https://blog.vuejs.org</link>
        <description>A VitePress site</description>
        <lastBuildDate>Thu, 06 Jun 2024 11:39:44 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-CN</language>
        <image>
            <title>S u z u k a</title>
            <url>https://vuejs.org/images/logo.png</url>
            <link>https://blog.vuejs.org</link>
        </image>
        <copyright>flaribbit</copyright>
        <item>
            <title><![CDATA[Actions自动部署]]></title>
            <link>https://blog.vuejs.orgposts/Actions自动部署.html</link>
            <guid>https://blog.vuejs.orgposts/Actions自动部署.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>小Q这个时候还没开始实现，属于边写边做边踩坑，之前也做个 blog ，不过并没有使用自动化部署，现在就来实现这个吧。路漫漫其修远兮，吾将上下而求索</p><h2 id="大致实现" tabindex="-1">大致实现 <a class="header-anchor" href="#大致实现" aria-label="Permalink to &quot;大致实现&quot;">​</a></h2><p>目前想法是，打包之后，将打包出来的dist 推送到专门用来展示 blog 的分支，或者由github上面自带的工作流执行命令进行打包并推送到指定分支，然后更新版本号。</p><p>不知道是否能支持，估计不可以，反正都试试吧，</p><h2 id="实现过程" tabindex="-1">实现过程 <a class="header-anchor" href="#实现过程" aria-label="Permalink to &quot;实现过程&quot;">​</a></h2><p>先在github上面找个好看的项目改造下 当前目录结构: <img src="https://github.com/LemonsNight/daiyousei-tools/blob/blog/apps/vitepress-theme-sakura/public/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17176437986462.png?raw=true" alt="当前项目截图"></p></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/react源码理解.html</link>
            <guid>https://blog.vuejs.orgposts/react源码理解.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/前端适配方案.html</link>
            <guid>https://blog.vuejs.orgposts/前端适配方案.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/实现虚拟列表.html</link>
            <guid>https://blog.vuejs.orgposts/实现虚拟列表.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/前端性能优化.html</link>
            <guid>https://blog.vuejs.orgposts/前端性能优化.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/前端自动部署方案.html</link>
            <guid>https://blog.vuejs.orgposts/前端自动部署方案.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/pnpm源码理解.html</link>
            <guid>https://blog.vuejs.orgposts/pnpm源码理解.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/搭建公共组件库.html</link>
            <guid>https://blog.vuejs.orgposts/搭建公共组件库.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/文档工程化.html</link>
            <guid>https://blog.vuejs.orgposts/文档工程化.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/微前端工程化.html</link>
            <guid>https://blog.vuejs.orgposts/微前端工程化.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <link>https://blog.vuejs.orgposts/vite工程化.html</link>
            <guid>https://blog.vuejs.orgposts/vite工程化.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用ast实现uniapp埋点]]></title>
            <link>https://blog.vuejs.orgposts/Ast埋点.html</link>
            <guid>https://blog.vuejs.orgposts/Ast埋点.html</guid>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>最近接到埋点需求，需要对Uni项目的App端和小程序进行埋点。经过研究社区提供的方案后，发现并没有一个完全符合公司业务需求的方案。因此，决定自己动手实现一个定制化的埋点方案。</p><h2 id="方案以及实现原理" tabindex="-1">方案以及实现原理 <a class="header-anchor" href="#方案以及实现原理" aria-label="Permalink to &quot;方案以及实现原理&quot;">​</a></h2><p>前提条件是使用Vite脚手架搭建的Uni项目。</p><p>解决方案是编写一个Vite插件，在构建过程中预先修改模板字符串。借助Vue自带的vue/compiler-sfc插件，我们可以将Vue代码解析为AST（抽象语法树），通过AST精确修改模板代码，无需使用复杂的正则表达式进行字符串匹配和修改。这种方案适用于大多数Vue项目。需要注意的是，由于这种操作会修改项目代码，建议在完成后编写测试进行验证，推荐使用Vitest进行测试。</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">由于小程序端以及app端并没有window，所以需要使用混入的方式 // utils.ts export</span></span>
<span class="line"><span style="color:#24292E;">const 你的埋点函数 = { methods: { sendMd: (code: string) =&gt; { // ...</span></span>
<span class="line"><span style="color:#24292E;">处理你的业务 uni.$emit(&quot;sendMd&quot;, code); } } }; APP.VUE export const createApp =</span></span>
<span class="line"><span style="color:#24292E;">() =&gt; { // *** app.mixin(&#39;你的埋点函数&#39;); return { app, Pinia }; };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>pages.vue</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">click</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">test</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;"> data-md</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;code1&quot;</span><span style="color:#24292E;">&gt; // .... &lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#B31D28;font-style:italic;">view</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>inject-click-handler.ts vite插件</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { parse } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;vue/compiler-sfc&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Plugin } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> default</span><span style="color:#24292E;"> ()</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Plugin</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;inject-click-handler&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#6F42C1;">    transform</span><span style="color:#24292E;">(</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">      try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#032F62;">/</span><span style="color:#005CC5;">.</span><span style="color:#032F62;">vue</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(id)) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> parseCode</span><span style="color:#D73A49;"> =</span><span style="color:#6F42C1;"> parse</span><span style="color:#24292E;">(code)</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parseCode) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">parseCode.descriptor?.template?.content) </span><span style="color:#D73A49;">return</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> dataMdRegex</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> /&lt;</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">&gt;]</span><span style="color:#D73A49;">*\b</span><span style="color:#032F62;">data-md=&quot;(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">&quot;]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">)&quot;</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">&gt;]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">&gt;/</span><span style="color:#D73A49;">g</span><span style="color:#6A737D;"> // 匹配data-md，这里需要根据业务进行调整。</span></span>
<span class="line"><span style="color:#6A737D;">        // 匹配当前文件是否有埋点标识，在继续往下遍历ast</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">content</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ast</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parseCode.descriptor.template</span></span>
<span class="line"><span style="color:#6A737D;">        // 返回null的时候表示不修改任何代码</span></span>
<span class="line"><span style="color:#D73A49;">        if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">content.</span><span style="color:#6F42C1;">match</span><span style="color:#24292E;">(dataMdRegex)) {</span></span>
<span class="line"><span style="color:#D73A49;">          return</span><span style="color:#005CC5;"> null</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#6A737D;">        // 获取template模板</span></span>
<span class="line"><span style="color:#D73A49;">        let</span><span style="color:#24292E;"> $code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> parseCode.descriptor.template.content</span></span>
<span class="line"><span style="color:#6A737D;">        // 需要修改的节点数组</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#005CC5;"> nodeArray</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#6A737D;">        // 递归ast节点</span></span>
<span class="line"><span style="color:#D73A49;">        const</span><span style="color:#6F42C1;"> handleEachAst</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">node</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">          if</span><span style="color:#24292E;"> (node?.props.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">            // 查找我们在页面写的data-md</span></span>
<span class="line"><span style="color:#D73A49;">            const</span><span style="color:#005CC5;"> isMd</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> node?.props?.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">              (</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">                item?.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;data-md&#39;</span><span style="color:#D73A49;"> ||</span></span>
<span class="line"><span style="color:#24292E;">                (item.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;bind&#39;</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> item?.arg?.content </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;data-md&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            )</span></span>
<span class="line"><span style="color:#6A737D;">            // 查找当前元素是否有点击函数并追加混入的埋点函数</span></span>
<span class="line"><span style="color:#D73A49;">            if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!!</span><span style="color:#24292E;">isMd) {</span></span>
<span class="line"><span style="color:#D73A49;">              const</span><span style="color:#005CC5;"> findVueClickEvent</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> node?.props?.</span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                (</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> item.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;on&#39;</span><span style="color:#D73A49;"> &amp;&amp;</span><span style="color:#24292E;"> item.type </span><span style="color:#D73A49;">===</span><span style="color:#005CC5;"> 7</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">              )</span></span>
<span class="line"><span style="color:#D73A49;">              let</span><span style="color:#24292E;"> pushFn </span><span style="color:#D73A49;">=</span><span style="color:#032F62;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#D73A49;">              const</span><span style="color:#005CC5;"> mdContent</span><span style="color:#D73A49;"> =</span></span>
<span class="line"><span style="color:#24292E;">                isMd.name </span><span style="color:#D73A49;">===</span><span style="color:#032F62;"> &#39;data-md&#39;</span></span>
<span class="line"><span style="color:#D73A49;">                  ?</span><span style="color:#032F62;"> `&#39;${</span><span style="color:#24292E;">isMd</span><span style="color:#032F62;">.</span><span style="color:#24292E;">value</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}&#39;`</span></span>
<span class="line"><span style="color:#D73A49;">                  :</span><span style="color:#24292E;"> isMd.exp.content</span></span>
<span class="line"><span style="color:#D73A49;">              if</span><span style="color:#24292E;"> (findVueClickEvent) {</span></span>
<span class="line"><span style="color:#6A737D;">                // 检查是否一个函数   sendMd是混入的埋点函数</span></span>
<span class="line"><span style="color:#D73A49;">                const</span><span style="color:#005CC5;"> isFunctionCall</span><span style="color:#D73A49;"> =</span></span>
<span class="line"><span style="color:#032F62;">                  /</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">\s</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">[a-zA-Z_$][0-9a-zA-Z_$]</span><span style="color:#D73A49;">*</span><span style="color:#005CC5;">\s</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">(</span><span style="color:#005CC5;">[</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">)]</span><span style="color:#D73A49;">*</span><span style="color:#032F62;">)</span><span style="color:#005CC5;">\s</span><span style="color:#D73A49;">*$</span><span style="color:#032F62;">/</span></span>
<span class="line"><span style="color:#6F42C1;">                if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">isFunctionCall.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(findVueClickEvent.exp.content)) {</span></span>
<span class="line"><span style="color:#24292E;">                  findVueClickEvent.exp.content += </span><span style="color:#032F62;">&#39;()&#39;</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">                pushFn = </span><span style="color:#032F62;">`@${</span><span style="color:#24292E;">findVueClickEvent</span><span style="color:#032F62;">.</span><span style="color:#24292E;">arg</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}=&quot;sendMd(&#39;sendMd&#39;,${</span><span style="color:#24292E;">mdContent</span><span style="color:#032F62;">});${</span><span style="color:#24292E;">findVueClickEvent</span><span style="color:#032F62;">.</span><span style="color:#24292E;">exp</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}&quot;`</span></span>
<span class="line"><span style="color:#24292E;">              } else {</span></span>
<span class="line"><span style="color:#24292E;">                pushFn = </span><span style="color:#032F62;">`@click=&quot;sendMd(&#39;sendMd&#39;,${</span><span style="color:#24292E;">mdContent</span><span style="color:#032F62;">})&quot;`</span></span>
<span class="line"><span style="color:#24292E;">              }</span></span>
<span class="line"><span style="color:#24292E;">              const nodeStr = node.loc.source.replace(</span></span>
<span class="line"><span style="color:#24292E;">                findVueClickEvent.loc.source,</span></span>
<span class="line"><span style="color:#24292E;">                pushFn,</span></span>
<span class="line"><span style="color:#24292E;">              )</span></span>
<span class="line"><span style="color:#24292E;">              nodeArray.push({</span></span>
<span class="line"><span style="color:#24292E;">                source: node.loc.source,</span></span>
<span class="line"><span style="color:#24292E;">                replaceSource: nodeStr,</span></span>
<span class="line"><span style="color:#24292E;">              })</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#D73A49;">          if</span><span style="color:#24292E;"> (Array.</span><span style="color:#6F42C1;">isArray</span><span style="color:#24292E;">(node?.children)) {</span></span>
<span class="line"><span style="color:#24292E;">            node.children.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              item.props </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#6F42C1;"> handleEachAst</span><span style="color:#24292E;">(item)</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">          if</span><span style="color:#24292E;"> (nodeArray.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            nodeArray.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">              $code </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> $code.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(item.source, item.replaceSource)</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">        handleEachAst</span><span style="color:#24292E;">(ast)</span></span>
<span class="line"><span style="color:#D73A49;">        return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          code: code.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(parseCode.descriptor.template.content, $code),</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;"> (e) {</span></span>
<span class="line"><span style="color:#24292E;">        return null</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br></div></div><p>vite.config.js</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#6F42C1;">  InjectClickHandler</span><span style="color:#24292E;">(), </span><span style="color:#6A737D;">// 必须写在uniPlugin前面</span></span>
<span class="line"><span style="color:#24292E;">  uniPlugin,</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[vue3 reactive 解析]]></title>
            <link>https://blog.vuejs.orgposts/vue源码理解.html</link>
            <guid>https://blog.vuejs.orgposts/vue源码理解.html</guid>
            <pubDate>Thu, 01 Jun 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div><p>reactive 是 vue3 中对数据进行劫持的核心，主要是利用了 Proxy 进行劫持，相比于 Object.defineproperty 能够劫持的类型和范围都更好，再也不用像 vue2 中那样对数组进行类似 hack 方式的劫持了。</p><p>下面快速看看 vue3 是怎么劫持。首先看看这个对象是是不是 __v_isReadonly 只读的，这个枚举在后面进行讲述，如果是，直接返回，否者调用 createReactiveObject 进行创建。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> function</span><span style="color:#6F42C1;"> reactive</span><span style="color:#24292E;">(</span><span style="color:#E36209;">target</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> object</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // if trying to observe a readonly proxy, return the readonly version.</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (target </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (target </span><span style="color:#D73A49;">as</span><span style="color:#6F42C1;"> Target</span><span style="color:#24292E;">).__v_isReadonly) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> target</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#6F42C1;"> createReactiveObject</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    target,</span></span>
<span class="line"><span style="color:#005CC5;">    false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    mutableHandlers,</span></span>
<span class="line"><span style="color:#24292E;">    mutableCollectionHandlers</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>createReactiveObject 中，有个四个参数，target 就是我们需要传入的对象，isReadonly 表示要创建的代理是不是只可读的，baseHandlers 是对进行基本类型的劫持，即 [Object,Array] ，collectionHandlers 是对集合类型的劫持, 即 [Set, Map, WeakMap, WeakSet]。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#6F42C1;"> createReactiveObject</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#E36209;">  target</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Target</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">  isReadonly</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> boolean</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#E36209;">  baseHandlers</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> ProxyHandler</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#E36209;">  collectionHandlers</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> ProxyHandler</span><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">any</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isObject</span><span style="color:#24292E;">(target)) {</span></span>
<span class="line"><span style="color:#D73A49;">    if</span><span style="color:#24292E;"> (__DEV__) {</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(</span><span style="color:#032F62;">`value cannot be made reactive: ${</span><span style="color:#6F42C1;">String</span><span style="color:#032F62;">(</span><span style="color:#24292E;">target</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> target</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // target is already a Proxy, return it.</span></span>
<span class="line"><span style="color:#6A737D;">  // exception: calling readonly() on a reactive object</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (target.__v_raw </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#D73A49;"> !</span><span style="color:#24292E;">(isReadonly </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> target.__v_isReactive)) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> target</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // target already has corresponding Proxy</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#6F42C1;">    hasOwn</span><span style="color:#24292E;">(target, isReadonly </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ReactiveFlags.readonly </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ReactiveFlags.reactive)</span></span>
<span class="line"><span style="color:#24292E;">  ) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> isReadonly </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> target.__v_readonly </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> target.__v_reactive</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#6A737D;">  // only a whitelist of value types can be observed.</span></span>
<span class="line"><span style="color:#D73A49;">  if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">canObserve</span><span style="color:#24292E;">(target)) {</span></span>
<span class="line"><span style="color:#D73A49;">    return</span><span style="color:#24292E;"> target</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#D73A49;">  const</span><span style="color:#005CC5;"> observed</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Proxy</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    target,</span></span>
<span class="line"><span style="color:#24292E;">    collectionTypes.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(target.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> collectionHandlers </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> baseHandlers</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#6F42C1;">  def</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    target,</span></span>
<span class="line"><span style="color:#24292E;">    isReadonly </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ReactiveFlags.readonly </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ReactiveFlags.reactive,</span></span>
<span class="line"><span style="color:#24292E;">    observed</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> observed</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>如果我们传入是 target 不是object，直接返回。 而如果 target 已经是个 proxy ，而且不是要求这个proxy 是已读的，但这个 proxy 是个响应式的，则直接返回这个 target。什么意思呢？我们创建的 proxy 有两种类型，一种是响应式的，另外一种是只读的。</p><p>而如果我们传入的 target 上面有挂载了响应式的 proxy，则直接返回上面挂载的 proxy 。</p><p>如果上面都不满足，则需要检查一下我们传进去的 target 是否可以进行劫持观察，如果 target 上面挂载了 __v_skip 属性 为 true 或者 不是我们再在上面讲参数时候讲的六种类型，或者 对象被freeze 了，还是不能进行劫持。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#6F42C1;"> canObserve</span><span style="color:#D73A49;"> =</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">value</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;"> Target</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;"> boolean</span><span style="color:#D73A49;"> =&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#D73A49;">  return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#D73A49;">    !</span><span style="color:#24292E;">value.__v_skip </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#6F42C1;">    isObservableType</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">toRawType</span><span style="color:#24292E;">(value)) </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#D73A49;">    !</span><span style="color:#24292E;">Object.</span><span style="color:#6F42C1;">isFrozen</span><span style="color:#24292E;">(value)</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果上面条件满足，则进行劫持，可以看到我们会根据 target 类型的不同进行不同的 handler，最后根据把 observed 挂载到原对象上，同时返回 observed。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#005CC5;"> observed</span><span style="color:#D73A49;"> =</span><span style="color:#D73A49;"> new</span><span style="color:#6F42C1;"> Proxy</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  target,</span></span>
<span class="line"><span style="color:#24292E;">  collectionTypes.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(target.</span><span style="color:#005CC5;">constructor</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> collectionHandlers </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> baseHandlers,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">def</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  target,</span></span>
<span class="line"><span style="color:#24292E;">  isReadonly </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> ReactiveFlags.readonly </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> ReactiveFlags.reactive,</span></span>
<span class="line"><span style="color:#24292E;">  observed,</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">return</span><span style="color:#24292E;"> observed</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>现在继续讲讲上面 ReactiveFlags 枚举，skip 用于标记对象不可以进行代理，可以用于 创建 component 的时候，把options 进行 markRaw，isReactive 和 isReadonly 都是由 proxy 劫持返回值，表示 proxy 的属性，raw 是 proxy 上面的 原始target ，reactive 和 readonly 是挂载在 target 上面的 proxy</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-light vp-code"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#D73A49;"> const</span><span style="color:#D73A49;"> enum</span><span style="color:#6F42C1;"> ReactiveFlags</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#005CC5;">  skip</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;__v_skip&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  isReactive</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;__v_isReactive&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  isReadonly</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;__v_isReadonly&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  raw</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;__v_raw&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  reactive</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;__v_reactive&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#005CC5;">  readonly</span><span style="color:#D73A49;"> =</span><span style="color:#032F62;"> &#39;__v_readonly&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>再讲讲可以创建的四种 proxy， 分别是reactive、 shallowReactive 、readonly 和 shallowReadonly。其实从字面意思就可以看出他们的区别了。具体细节会在 collectionHandlers 和 baseHandlers 进行讲解。</p></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[vue3 reactive 解析]]></title>
            <link>https://blog.vuejs.orgposts/webpack工程化.html</link>
            <guid>https://blog.vuejs.orgposts/webpack工程化.html</guid>
            <pubDate>Tue, 02 May 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<a href="#" class="totop" style="top:-900px;" aria-label="to-top"></a><!--[--><!----><div class="article"><div style="position:relative;" class="content"><div><h2 id="webpack和vite有什么区别" tabindex="-1">webpack和vite有什么区别？ <a class="header-anchor" href="#webpack和vite有什么区别" aria-label="Permalink to &quot;webpack和vite有什么区别？&quot;">​</a></h2><p>vite: 采用的是 ES 模块，在构建的时候，已经确定了文件之间的依赖关系，</p><p>不需要在运行时去做动态解析，由于 ES 的依赖关系在代码编写时已知，浏览器可以并行加载多个模块，而不必等待前一个模块加载完成后再加载下一个模块。这种并行加载的特性可以显著提高在多依赖项目的加载速度。</p><p>ESM 具有内置的缓存机制，可以避免重复加载已经加载过的模块，从而减少了不必要的网络请求和资源消耗。</p><p>相对于传统的模块格式，ESM 更加轻量级，不需要像 CommonJS 那样进行额外的封装和包装，因此在解析和执行时更加高效。</p><p>这些因素使得在适当的情况下，使用 ESM 的应用程序在加载和执行速度上可以比使用传统的模块格式更快。在 Vite 中，利用了这些优势，通过原生 ES 模块的加载和解析来实现快速的开发启动和热模块替换。</p><p>webpack: 把整个项目视为一个模块，通过 loader（加载器） 和 plugins（插件） 对代码转换，对于大型项目，首次加载会慢一点</p></div></div><div class="content nav"><span><a href=""><i class="fa fa-angle-left"></i> </a></span><span><a href=""> <i class="fa fa-angle-right"></i></a></span></div><!----><div class="toc"><ol><!--[--><!--]--></ol></div></div><!--]-->]]></content:encoded>
        </item>
    </channel>
</rss>